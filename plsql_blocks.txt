--Create a trigger that inserts a record into the TRANSACTIONS table after an insert into the VEHICLES table.
CREATE OR REPLACE TRIGGER insert_transaction
AFTER INSERT ON VEHICLES
FOR EACH ROW
BEGIN
  INSERT INTO TRANSACTIONS (TRANSACTIONID, BOOTHID, VEHICLEID, CUSTOMERID, DATEANDTIME, PRICE)
  VALUES (:NEW.VEHICLEID, <boothid_value>, :NEW.VEHICLEID, <customerid_value>, SYSDATE, <price_value>);
END;
/


--Create a trigger that updates the price in the TRANSACTIONS table after an update in the VEHICLES table.
CREATE OR REPLACE TRIGGER update_transaction_price
AFTER UPDATE ON VEHICLES
FOR EACH ROW
BEGIN
  UPDATE TRANSACTIONS
  SET PRICE = <new_price_value>
  WHERE VEHICLEID = :NEW.VEHICLEID;
END;
/


--Create a cursor that retrieves all the vehicles of a given customer.
DECLARE
  CURSOR customer_vehicles_cursor (customer_id IN INT) IS
    SELECT V.* 
    FROM VEHICLES V
    INNER JOIN TRANSACTIONS T ON V.VEHICLEID = T.VEHICLEID
    WHERE T.CUSTOMERID = customer_id;
    customer_id INT := <customer_id_value>;
BEGIN
  FOR vehicle IN customer_vehicles_cursor(customer_id) LOOP
    DBMS_OUTPUT.PUT_LINE('Vehicle ID: ' || vehicle.VEHICLEID || ', License No: ' || vehicle.LICENSENO);
  END LOOP;
END;
/


--Create a procedure that retrieves the total revenue generated by a given booth.
CREATE OR REPLACE PROCEDURE calculate_booth_revenue(booth_id IN INT) IS
  total_revenue DECIMAL(10, 2);
BEGIN
  SELECT SUM(PRICE) INTO total_revenue
  FROM TRANSACTIONS
  WHERE BOOTHID = booth_id;
  
  DBMS_OUTPUT.PUT_LINE('Total revenue for booth ' || booth_id || ': ' || total_revenue);
END;
/


--Create a procedure that inserts a new customer and their vehicle details into the respective tables.
CREATE OR REPLACE PROCEDURE add_customer_vehicle(
  customer_id IN INT,
  first_name IN VARCHAR2,
  last_name IN VARCHAR2,
  c_address IN VARCHAR2,
  c_contact_no IN BIGINT,
  license_no IN VARCHAR2,
  vehicle_type IN VARCHAR2
) IS
  vehicle_id INT;
BEGIN
  INSERT INTO CUSTOMERS (CUSTOMERID, FIRSTNAME, LASTNAME, CADDRESS, CCONTACTNO)
  VALUES (customer_id, first_name, last_name, c_address, c_contact_no);
  
  SELECT MAX(VEHICLEID) + 1 INTO vehicle_id FROM VEHICLES;
  
  INSERT INTO VEHICLES (VEHICLEID, LICENSENO, VEHICLETYPE)
  VALUES (vehicle_id, license_no, vehicle_type);
  DBMS_OUTPUT.PUT_LINE('New customer and vehicle added successfully.');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


--Create a procedure that calculates and updates the price of a transaction based on the vehicle type.
CREATE OR REPLACE PROCEDURE calculate_transaction_price(
  transaction_id IN INT,
  vehicle_type IN VARCHAR2
) IS
  price DECIMAL(10, 2);
BEGIN
  IF vehicle_type = 'Car' THEN
    price := 10.0;
  ELSIF vehicle_type = 'Motorcycle' THEN
    price := 5.0;
  ELSE
    RAISE_APPLICATION_ERROR(-20001, 'Invalid vehicle type.');
  END IF;
  
  UPDATE TRANSACTIONS
  SET PRICE = price
  WHERE TRANSACTIONID = transaction_id;
  
  DBMS_OUTPUT.PUT_LINE('Transaction price updated successfully.');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


--Create a trigger that raises an exception when an attempt is made to delete a booth with associated transactions.
CREATE OR REPLACE TRIGGER delete_booth_check
BEFORE DELETE ON BOOTH
FOR EACH ROW
DECLARE
  booth_transactions_exist EXCEPTION;
BEGIN
  SELECT COUNT(*)
  INTO booth_transactions_exist
  FROM TRANSACTIONS
  WHERE BOOTHID = :OLD.BOOTHID;
  
  IF booth_transactions_exist > 0 THEN
    RAISE_APPLICATION_ERROR(-20002, 'Booth cannot be deleted. Associated transactions exist.');
  END IF;
END;
/


--Create a trigger that updates the total revenue in the BOOTH table after an insert or delete in the TRANSACTIONS table.
CREATE OR REPLACE TRIGGER update_booth_revenue
AFTER INSERT OR DELETE ON TRANSACTIONS
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    UPDATE BOOTH
    SET TOTALREVENUE = TOTALREVENUE + :NEW.PRICE
    WHERE BOOTHID = :NEW.BOOTHID;
  ELSIF DELETING THEN
    UPDATE BOOTH
    SET TOTALREVENUE = TOTALREVENUE - :OLD.PRICE
    WHERE BOOTHID = :OLD.BOOTHID;
  END IF;
END;
/


--Create a cursor that retrieves all the transactions with prices greater than a specified amount.
DECLARE
  CURSOR high_price_transactions_cursor (amount IN DECIMAL) IS
    SELECT *
    FROM TRANSACTIONS
    WHERE PRICE > amount;
  
  max_price DECIMAL := <max_price_value>;
BEGIN
  FOR transaction IN high_price_transactions_cursor(max_price) LOOP
    -- Process each transaction
    DBMS_OUTPUT.PUT_LINE('Transaction ID: ' || transaction.TRANSACTIONID || ', Price: ' || transaction.PRICE);
  END LOOP;
END;
/


--Create a procedure that calculates and updates the total revenue for each booth.
CREATE OR REPLACE PROCEDURE calculate_total_revenue IS
BEGIN
  FOR booth IN (SELECT BOOTHID FROM BOOTH) LOOP
    UPDATE BOOTH B
    SET TOTALREVENUE = (SELECT SUM(PRICE) FROM TRANSACTIONS WHERE BOOTHID = booth.BOOTHID)
    WHERE B.BOOTHID = booth.BOOTHID;
  END LOOP;
  
  DBMS_OUTPUT.PUT_LINE('Total revenue calculated and updated successfully.');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


--Create a procedure that retrieves the customer details along with their latest transaction.
CREATE OR REPLACE PROCEDURE get_customer_latest_transaction IS
  customer_id INT;
  customer_first_name VARCHAR2(100);
  customer_last_name VARCHAR2(100);
  transaction_id INT;
  transaction_date DATE;
  transaction_price DECIMAL(10, 2);
BEGIN
  SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, T.TRANSACTIONID, T.DATEANDTIME, T.PRICE
  INTO customer_id, customer_first_name, customer_last_name, transaction_id, transaction_date, transaction_price
  FROM CUSTOMERS C
  INNER JOIN TRANSACTIONS T ON C.CUSTOMERID = T.CUSTOMERID
  WHERE T.DATEANDTIME = (SELECT MAX(DATEANDTIME) FROM TRANSACTIONS WHERE CUSTOMERID = C.CUSTOMERID);
  
  DBMS_OUTPUT.PUT_LINE('Customer ID: ' || customer_id);
  DBMS_OUTPUT.PUT_LINE('Customer Name: ' || customer_first_name || ' ' || customer_last_name);
  DBMS_OUTPUT.PUT_LINE('Latest Transaction ID: ' || transaction_id);
  DBMS_OUTPUT.PUT_LINE('Latest Transaction Date: ' || transaction_date);
  DBMS_OUTPUT.PUT_LINE('Latest Transaction Price: ' || transaction_price);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No customer found.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


--Create a procedure that transfers a vehicle from one customer to another.
CREATE OR REPLACE PROCEDURE transfer_vehicle(
  vehicle_id IN INT,
  from_customer_id IN INT,
  to_customer_id IN INT
) IS
BEGIN
  UPDATE VEHICLES
  SET CUSTOMERID = to_customer_id
  WHERE VEHICLEID = vehicle_id AND CUSTOMERID = from_customer_id;
  
  DBMS_OUTPUT.PUT_LINE('Vehicle transferred successfully.');
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Vehicle or customer not found.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


--Create a procedure that retrieves the total revenue for a specific booth.
CREATE OR REPLACE PROCEDURE get_booth_total_revenue(
  booth_id IN INT,
  total_revenue OUT DECIMAL
) IS
BEGIN
  SELECT TOTALREVENUE
  INTO total_revenue
  FROM BOOTH
  WHERE BOOTHID = booth_id;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Booth not found.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


--Create a trigger that prevents inserting a transaction with a price below a certain threshold.
CREATE OR REPLACE TRIGGER price_threshold_check
BEFORE INSERT ON TRANSACTIONS
FOR EACH ROW
DECLARE
  price_threshold DECIMAL := <price_threshold_value>;
BEGIN
  IF :NEW.PRICE < price_threshold THEN
    RAISE_APPLICATION_ERROR(-20003, 'Transaction price is below the threshold.');
  END IF;
END;
/


--Create a procedure that retrieves the count of transactions for each customer.
CREATE OR REPLACE PROCEDURE get_customer_transaction_count IS
  customer_id INT;
  transaction_count INT;
BEGIN
  FOR customer IN (SELECT CUSTOMERID FROM CUSTOMERS) LOOP
    SELECT COUNT(*)
    INTO transaction_count
    FROM TRANSACTIONS
    WHERE CUSTOMERID = customer.CUSTOMERID;
    
    DBMS_OUTPUT.PUT_LINE('Customer ID: ' || customer.CUSTOMERID);
    DBMS_OUTPUT.PUT_LINE('Transaction Count: ' || transaction_count);
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

